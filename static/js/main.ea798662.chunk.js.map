{"version":3,"sources":["Pagination.tsx","TikTokEmbed.tsx","firebase.ts","PaginatedList.tsx","App.tsx","index.tsx"],"names":["Pagination","_ref","currentPage","onPageChange","totalPages","handlePreviousClick","handleNextClick","inputValue","setInputValue","useState","handleJumpToPage","pageNumber","Number","isNaN","React","createElement","className","onClick","disabled","getDisplayedPages","range","i","Math","max","min","push","unshift","map","page","index","key","type","value","onChange","event","target","onKeyDown","placeholder","extractVideoId","url","match","TikTokEmbed","isMobile","breakpoint","arguments","length","undefined","setIsMobile","window","innerWidth","useEffect","handleResize","addEventListener","removeEventListener","useIsMobile","videoId","embedUrl","concat","iframeRef","useRef","current","setTimeout","sendMessageToIframe","iframe","message","contentWindow","postMessage","console","warn","x-tiktok-player","link","href","rel","allow","ref","style","height","width","src","allowFullScreen","title","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getFirestore","PaginatedList","items","itemsPerPage","_setCurrentPage","async","docRef","doc","docSnap","getDoc","exists","data","error","fetchPageNumber","setCurrentPage","useCallback","newPage","setDoc","newPageNumber","savePageNumber","scrollTo","startIndex","endIndex","currentItems","slice","handleKeyDown","ceil","totalCount","item","App","list","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.ea798662.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\ninterface PaginationProps {\r\n  currentPage: number;\r\n  totalPages: number;\r\n  onPageChange: (pageNumber: number) => void;\r\n  handlePreviousClick: () => void;\r\n  handleNextClick: () => void;\r\n}\r\n\r\nconst Pagination: React.FC<PaginationProps> = ({\r\n  currentPage,\r\n  onPageChange,\r\n  totalPages,\r\n  handlePreviousClick,\r\n  handleNextClick,\r\n}) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setInputValue(event.target.value);\r\n  };\r\n\r\n  const handleJumpToPage = () => {\r\n    const pageNumber = Number(inputValue);\r\n    if (!isNaN(pageNumber) && pageNumber >= 1 && pageNumber <= totalPages) {\r\n      onPageChange(pageNumber);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (event.key === \"Enter\") {\r\n      handleJumpToPage();\r\n    }\r\n  };\r\n\r\n  const getDisplayedPages = () => {\r\n    const delta = 2;\r\n    let range: (number | string)[] = [];\r\n\r\n    for (\r\n      let i = Math.max(2, currentPage - delta);\r\n      i <= Math.min(totalPages - 1, currentPage + delta);\r\n      i++\r\n    ) {\r\n      range.push(i);\r\n    }\r\n\r\n    if (currentPage - delta > 2) {\r\n      range.unshift(\"...\");\r\n    }\r\n    if (currentPage + delta < totalPages - 1) {\r\n      range.push(\"...\");\r\n    }\r\n\r\n    range.unshift(1);\r\n    if (totalPages !== 1) {\r\n      range.push(totalPages);\r\n    }\r\n\r\n    return range;\r\n  };\r\n\r\n  return (\r\n    <div className=\"pagination\">\r\n      <button onClick={handlePreviousClick} disabled={currentPage === 1}>\r\n        &lt;\r\n      </button>\r\n      {getDisplayedPages().map((page, index) =>\r\n        typeof page === \"number\" ? (\r\n          <button\r\n            key={index}\r\n            onClick={() => onPageChange(page)}\r\n            className={currentPage === page ? \"active\" : \"\"}\r\n          >\r\n            {page}\r\n          </button>\r\n        ) : (\r\n          <span key={index}>...</span>\r\n        )\r\n      )}\r\n      <button onClick={handleNextClick} disabled={currentPage === totalPages}>\r\n        &gt;\r\n      </button>\r\n      <input\r\n        type=\"number\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n        onKeyDown={handleKeyDown}\r\n        placeholder=\"Jump to page\"\r\n      />\r\n      <button onClick={handleJumpToPage}>Go</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nconst useIsMobile = (breakpoint = 768) => {\r\n  const [isMobile, setIsMobile] = useState(window.innerWidth <= breakpoint);\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setIsMobile(window.innerWidth <= breakpoint);\r\n    };\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, [breakpoint]);\r\n\r\n  return isMobile;\r\n};\r\n\r\ninterface TikTokEmbedProps {\r\n  url: string;\r\n  currentPage: number;\r\n  totalPages: number;\r\n  handlePreviousClick: () => void;\r\n  handleNextClick: () => void;\r\n}\r\n\r\ninterface EmbeddedPlayerMessage<T> {\r\n  \"x-tiktok-player\": boolean;\r\n  value?: T;\r\n  type: string;\r\n}\r\n\r\nconst sendMessageToIframe = <T,>(\r\n  iframe: HTMLIFrameElement,\r\n  message: EmbeddedPlayerMessage<T>\r\n) => {\r\n  if (iframe.contentWindow) {\r\n    iframe.contentWindow.postMessage(message, \"*\");\r\n  } else {\r\n    console.warn(\"iframe contentWindow not available\");\r\n  }\r\n};\r\n\r\nconst TikTokEmbed: React.FC<TikTokEmbedProps> = ({\r\n  url,\r\n  currentPage,\r\n  handlePreviousClick,\r\n  handleNextClick,\r\n  totalPages,\r\n}) => {\r\n  const isMobile = useIsMobile();\r\n  const videoId = extractVideoId(url);\r\n  const embedUrl = `https://www.tiktok.com/player/v1/${videoId}?autoplay=1&loop=1&rel=0&music_info=1`;\r\n\r\n  const iframeRef = useRef<HTMLIFrameElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (iframeRef.current) {\r\n      iframeRef.current.addEventListener(\"load\", () => {\r\n        setTimeout(() => {\r\n          sendMessageToIframe(iframeRef.current!, {\r\n            \"x-tiktok-player\": true,\r\n            type: \"unMute\",\r\n          });\r\n        }, 500);\r\n      });\r\n    }\r\n  }, []);\r\n  const link = (\r\n    <a className=\"link\" href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n      link\r\n    </a>\r\n  );\r\n  return (\r\n    <div className=\"container\">\r\n      <button\r\n        className=\"big_button\"\r\n        onClick={handlePreviousClick}\r\n        disabled={currentPage === 1}\r\n      >\r\n        prev\r\n      </button>\r\n      <div className=\"tiktok-embed\">\r\n        <iframe\r\n          allow=\"autoplay\"\r\n          ref={iframeRef}\r\n          style={{\r\n            height: \"calc(100vh - 160px)\",\r\n            width: \"calc((100vh - 160px)/16*9)\",\r\n          }}\r\n          src={embedUrl}\r\n          allowFullScreen\r\n          title=\"TikTok Video\"\r\n        />\r\n        {!isMobile && link}\r\n      </div>\r\n      {isMobile && link}\r\n\r\n      <button\r\n        className=\"big_button\"\r\n        onClick={handleNextClick}\r\n        disabled={currentPage === totalPages}\r\n      >\r\n        next\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst extractVideoId = (url: string): string => {\r\n  const match = url.match(/\\/video\\/(\\d+)/);\r\n  return match ? match[1] : \"\";\r\n};\r\n\r\nexport default TikTokEmbed;\r\n","import { initializeApp } from \"firebase/app\";\r\nimport { getFirestore } from 'firebase/firestore/lite';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDtRPWWHuv28iklrjj8XgG-FeNq1oSyX-c\",\r\n  authDomain: \"tiktoks-of-my-wife.firebaseapp.com\",\r\n  projectId: \"tiktoks-of-my-wife\",\r\n  storageBucket: \"tiktoks-of-my-wife.appspot.com\",\r\n  messagingSenderId: \"1012702838608\",\r\n  appId: \"1:1012702838608:web:9bd43ff94d3944e9d97655\",\r\n  measurementId: \"G-MMJ4J9MJR0\"\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nexport const db = getFirestore(app);\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport Pagination from \"./Pagination\";\r\nimport TikTokEmbed from \"./TikTokEmbed\";\r\nimport { db } from \"./firebase\";\r\nimport { doc, getDoc, setDoc } from \"firebase/firestore/lite\";\r\n\r\ninterface PaginatedListProps {\r\n  items: string[];\r\n  itemsPerPage: number;\r\n}\r\n\r\nconst PaginatedList: React.FC<PaginatedListProps> = ({\r\n  items,\r\n  itemsPerPage,\r\n}) => {\r\n  const [currentPage, _setCurrentPage] = useState(1);\r\n\r\n  const DOCUMENT_ID = \"single-user-page-number\";\r\n\r\n  useEffect(() => {\r\n    const fetchPageNumber = async () => {\r\n      try {\r\n        const docRef = doc(db, \"appData\", DOCUMENT_ID);\r\n        const docSnap = await getDoc(docRef);\r\n        if (docSnap.exists()) {\r\n          _setCurrentPage(docSnap.data().pageNumber);\r\n        } else {\r\n          console.error(\"No such document.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching page number:\", error);\r\n      }\r\n    };\r\n\r\n    fetchPageNumber();\r\n  }, []);\r\n\r\n  const savePageNumber = async (newPageNumber: number) => {\r\n    try {\r\n      const docRef = doc(db, \"appData\", DOCUMENT_ID);\r\n      await setDoc(docRef, { pageNumber: newPageNumber });\r\n    } catch (error) {\r\n      console.error(\"Error saving page number:\", error);\r\n    }\r\n  };\r\n\r\n  const setCurrentPage = useCallback(\r\n    (newPage: number) => {\r\n      _setCurrentPage(newPage);\r\n      savePageNumber(newPage);\r\n      if (itemsPerPage !== 1) {\r\n        window.scrollTo(0, 0);\r\n      }\r\n    },\r\n    [itemsPerPage]\r\n  );\r\n\r\n  const startIndex = (currentPage - 1) * itemsPerPage;\r\n  const endIndex = startIndex + itemsPerPage;\r\n  const currentItems = items.slice(startIndex, endIndex);\r\n\r\n  const onPageChange = (pageNumber: number) => {\r\n    setCurrentPage(pageNumber);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleKeyDown = (event: KeyboardEvent) => {\r\n      if (event.key === \"ArrowLeft\") {\r\n        handlePreviousClick();\r\n      } else if (event.key === \"ArrowRight\") {\r\n        handleNextClick();\r\n      }\r\n    };\r\n    const handlePreviousClick = () => {\r\n      if (currentPage > 1) {\r\n        setCurrentPage(currentPage - 1);\r\n      }\r\n    };\r\n\r\n    const handleNextClick = () => {\r\n      if (currentPage < Math.ceil(items.length / itemsPerPage)) {\r\n        setCurrentPage(currentPage + 1);\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"keydown\", handleKeyDown);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleKeyDown);\r\n    };\r\n  }, [currentPage, items.length, itemsPerPage, setCurrentPage]);\r\n\r\n  const handlePreviousClick = () => {\r\n    if (currentPage > 1) {\r\n      onPageChange(currentPage - 1);\r\n    }\r\n  };\r\n\r\n  const handleNextClick = () => {\r\n    if (currentPage < totalPages) {\r\n      onPageChange(currentPage + 1);\r\n    }\r\n  };\r\n\r\n  const totalCount = items.length;\r\n  const totalPages = Math.ceil(totalCount / itemsPerPage);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"list\">\r\n        {currentItems.map((item, index) => (\r\n          <TikTokEmbed\r\n            key={index}\r\n            url={item}\r\n            {...{\r\n              handlePreviousClick,\r\n              handleNextClick,\r\n              totalPages,\r\n              currentPage,\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n      <Pagination\r\n        {...{\r\n          currentPage,\r\n          onPageChange,\r\n          handlePreviousClick,\r\n          handleNextClick,\r\n          totalPages,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PaginatedList;\r\n","import React from \"react\";\n\nimport \"./App.css\";\nimport list from \"./karina's tiktoks.json\";\nimport PaginatedList from \"./PaginatedList\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <h1>Tiktoks of my Wife &lt;3</h1>\n      <PaginatedList items={list} itemsPerPage={1} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(\n  document.getElementById(\"root\") as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}